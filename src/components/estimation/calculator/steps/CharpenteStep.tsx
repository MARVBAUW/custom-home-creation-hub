
import React from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { FormData } from '../types';
import { Button } from "@/components/ui/button";
import { ArrowLeftIcon, ArrowRightIcon } from 'lucide-react';
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { ensureNumber } from '../utils/typeConversions';

interface CharpenteStepProps {
  formData: FormData;
  updateFormData: (data: Partial<FormData>) => void;
  goToNextStep: () => void;
  goToPreviousStep: () => void;
  animationDirection: string;
}

const CharpenteStep: React.FC<CharpenteStepProps> = ({ 
  formData, 
  updateFormData, 
  goToNextStep,
  goToPreviousStep,
  animationDirection
}) => {
  const [roofType, setRoofType] = React.useState<string>(formData.roofType || '');
  
  // Calculate the montantT value based on selection and surface
  const calculateMontantT = (selectedRoofType: string): number => {
    const surface = ensureNumber(formData.surface, 0);
    let rate = 0;
    
    switch (selectedRoofType) {
      case 'toiture_terrasse_accessible':
        rate = 150;
        break;
      case 'toiture_terrasse_inaccessible':
        rate = 130;
        break;
      case 'charpente_industrielle':
        rate = 110;
        break;
      case 'charpente_traditionnelle':
        rate = 1; // This seems very low compared to others, but keeping it as in the original form
        break;
      default:
        rate = 130; // Default to toiture_terrasse_inaccessible if no selection
        break;
    }
    
    // Calculate the additional amount for this step
    const additionalAmount = surface * rate;
    
    // Add to the existing montantT or initialize it
    const currentMontantT = ensureNumber(formData.montantT, 0);
    return currentMontantT + additionalAmount;
  };
  
  const handleSubmit = () => {
    // Calculate the updated montantT value
    const updatedMontantT = calculateMontantT(roofType);
    
    // Update the form data
    updateFormData({ 
      roofType,
      montantT: updatedMontantT
    });
    
    // Proceed to next step
    goToNextStep();
  };

  return (
    <div className={`space-y-6 transform transition-all duration-300 ${
      animationDirection === 'forward' ? 'translate-x-0 opacity-100' : '-translate-x-0 opacity-100'
    }`}>
      <h2 className="text-xl font-semibold mb-6">Charpente</h2>
      
      <div className="space-y-4">
        <Label className="text-base font-medium">
          Type de charpente/toiture <span className="text-red-500">*</span>
        </Label>
        
        <RadioGroup 
          value={roofType} 
          onValueChange={setRoofType}
          className="grid grid-cols-1 gap-4 mt-2"
        >
          <Card 
            className={`cursor-pointer transition-all hover:shadow-md ${roofType === 'toiture_terrasse_accessible' ? 'border-blue-500 bg-blue-50' : ''}`}
            onClick={() => setRoofType('toiture_terrasse_accessible')}
          >
            <CardContent className="flex items-center p-4">
              <RadioGroupItem value="toiture_terrasse_accessible" id="toiture_terrasse_accessible" className="mr-2" />
              <Label htmlFor="toiture_terrasse_accessible" className="cursor-pointer">Toiture terrasse accessible</Label>
            </CardContent>
          </Card>
          
          <Card 
            className={`cursor-pointer transition-all hover:shadow-md ${roofType === 'toiture_terrasse_inaccessible' ? 'border-blue-500 bg-blue-50' : ''}`}
            onClick={() => setRoofType('toiture_terrasse_inaccessible')}
          >
            <CardContent className="flex items-center p-4">
              <RadioGroupItem value="toiture_terrasse_inaccessible" id="toiture_terrasse_inaccessible" className="mr-2" />
              <Label htmlFor="toiture_terrasse_inaccessible" className="cursor-pointer">Toiture terrasse inaccessible</Label>
            </CardContent>
          </Card>
          
          <Card 
            className={`cursor-pointer transition-all hover:shadow-md ${roofType === 'charpente_industrielle' ? 'border-blue-500 bg-blue-50' : ''}`}
            onClick={() => setRoofType('charpente_industrielle')}
          >
            <CardContent className="flex items-center p-4">
              <RadioGroupItem value="charpente_industrielle" id="charpente_industrielle" className="mr-2" />
              <Label htmlFor="charpente_industrielle" className="cursor-pointer">Charpente industrielle</Label>
            </CardContent>
          </Card>
          
          <Card 
            className={`cursor-pointer transition-all hover:shadow-md ${roofType === 'charpente_traditionnelle' ? 'border-blue-500 bg-blue-50' : ''}`}
            onClick={() => setRoofType('charpente_traditionnelle')}
          >
            <CardContent className="flex items-center p-4">
              <RadioGroupItem value="charpente_traditionnelle" id="charpente_traditionnelle" className="mr-2" />
              <Label htmlFor="charpente_traditionnelle" className="cursor-pointer">Charpente traditionnelle</Label>
            </CardContent>
          </Card>
        </RadioGroup>
      </div>
      
      <div className="bg-gray-100 p-3 rounded-md text-center text-lg font-semibold">
        Total travaux : {formData.montantT ? ensureNumber(formData.montantT, 0).toLocaleString() : 0} â‚¬/HT
      </div>
      
      <div className="flex justify-between pt-6">
        <Button 
          type="button" 
          variant="outline" 
          onClick={goToPreviousStep}
          className="flex items-center gap-2"
        >
          <ArrowLeftIcon className="h-4 w-4" />
          Retour
        </Button>
        
        <Button 
          onClick={handleSubmit}
          disabled={!roofType}
          className="flex items-center gap-2"
        >
          Suivant
          <ArrowRightIcon className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
};

export default CharpenteStep;
